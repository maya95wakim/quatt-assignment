{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-15T09:36:50.343Z",
    "end": "2024-03-15T09:36:53.075Z",
    "duration": 2732,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "35df3748-8df9-43bf-bbad-02dcb6fac787",
      "title": "",
      "fullFile": "cypress/e2e/crud.js",
      "file": "cypress/e2e/crud.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a2272ccc-46c0-4424-be5b-02db5b3fecb2",
          "title": "Successful user CRUD",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create a new user with valid data",
              "fullTitle": "Successful user CRUD Should create a new user with valid data",
              "timedOut": null,
              "duration": 485,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'users',\n  body: _user.default.newUser,\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.body.name).to.equal(_user.default.newUser.name);\n  expect(res.body.email).to.equal(_user.default.newUser.email);\n  expect(res.body.gender).to.equal(_user.default.newUser.gender);\n  expect(res.body.status).to.equal(_user.default.newUser.status);\n  id = res.body.id;\n});",
              "err": {},
              "uuid": "fc743715-05ab-43fb-a67d-2e0e314b17a8",
              "parentUUID": "a2272ccc-46c0-4424-be5b-02db5b3fecb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get a user with all its data",
              "fullTitle": "Successful user CRUD Should get a user with all its data",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `users/${id}`,\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.body.name).to.equal(_user.default.newUser.name);\n  expect(res.body.email).to.equal(_user.default.newUser.email);\n  expect(res.body.gender).to.equal(_user.default.newUser.gender);\n  expect(res.body.status).to.equal(_user.default.newUser.status);\n  id = res.body.id;\n});",
              "err": {},
              "uuid": "468c6681-497d-4b2d-875e-17698cc29584",
              "parentUUID": "a2272ccc-46c0-4424-be5b-02db5b3fecb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update an existing user",
              "fullTitle": "Successful user CRUD Should update an existing user",
              "timedOut": null,
              "duration": 405,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'PUT',\n  url: `users/${id}`,\n  body: _user.default.updateUser,\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).its('body').then(body => {\n  expect(body.name).to.equal(_user.default.updateUser.name);\n  expect(body.email).to.equal(_user.default.updateUser.email);\n  expect(body.gender).to.equal(_user.default.updateUser.gender);\n  expect(body.status).to.equal(_user.default.updateUser.status);\n});",
              "err": {},
              "uuid": "157a72af-3046-44bb-a74d-7002df28d4ce",
              "parentUUID": "a2272ccc-46c0-4424-be5b-02db5b3fecb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete an existing user and give a 204 status",
              "fullTitle": "Successful user CRUD Should delete an existing user and give a 204 status",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: `users/${id}`,\n  body: _user.default,\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.status).to.equal(204);\n});",
              "err": {},
              "uuid": "9a5cab17-83e4-443d-bf58-3a26bdd3cf39",
              "parentUUID": "a2272ccc-46c0-4424-be5b-02db5b3fecb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should check if the deleted users has been actually deleted",
              "fullTitle": "Successful user CRUD Should check if the deleted users has been actually deleted",
              "timedOut": null,
              "duration": 389,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `users/${id}`,\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.body.message).to.equal('Resource not found');\n  expect(res.status).to.equal(404);\n});",
              "err": {},
              "uuid": "181cc742-51c9-4d72-85c9-dd6edf5f20b8",
              "parentUUID": "a2272ccc-46c0-4424-be5b-02db5b3fecb2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc743715-05ab-43fb-a67d-2e0e314b17a8",
            "468c6681-497d-4b2d-875e-17698cc29584",
            "157a72af-3046-44bb-a74d-7002df28d4ce",
            "9a5cab17-83e4-443d-bf58-3a26bdd3cf39",
            "181cc742-51c9-4d72-85c9-dd6edf5f20b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1863,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "02d5e74f-c42f-43f3-8b57-da832901e3ff",
          "title": "negative test for CRUD operations",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get an error message to create a new user with UnAuthorized token",
              "fullTitle": "negative test for CRUD operations Should get an error message to create a new user with UnAuthorized token",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'users',\n  body: _user.default.newUser,\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.body.message).to.equal(\"Authentication failed\");\n  expect(res.status).to.equal(401);\n});",
              "err": {},
              "uuid": "24994f27-25c4-44be-9d94-63ffa7e50c29",
              "parentUUID": "02d5e74f-c42f-43f3-8b57-da832901e3ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get error messages for the invalid fields (gender,status,email)",
              "fullTitle": "negative test for CRUD operations Should get error messages for the invalid fields (gender,status,email)",
              "timedOut": null,
              "duration": 296,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'users',\n  body: _user.default.unvalidUser,\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).its('body').then(bodies => {\n  bodies.forEach(body => {\n    if (body.field == \"gender\") {\n      expect(body.message).to.equal(\"can't be blank, can be male of female\");\n    }\n    if (body.field == \"status\") {\n      expect(body.message).to.equal(\"can't be blank\");\n    }\n    if (body.field == \"email\") {\n      expect(body.message).to.equal(\"is invalid\");\n    }\n  });\n});",
              "err": {},
              "uuid": "4d30f7b1-2912-4f17-90eb-5da6da098dd8",
              "parentUUID": "02d5e74f-c42f-43f3-8b57-da832901e3ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get error messages when try to delete a not existing user",
              "fullTitle": "negative test for CRUD operations Should get error messages when try to delete a not existing user",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'Delete',\n  url: 'users/00',\n  headers: {\n    authorization: token\n  },\n  failOnStatusCode: false\n}).then(res => {\n  expect(res.body.message).to.equal(\"Resource not found\");\n  expect(res.status).to.equal(404);\n});",
              "err": {},
              "uuid": "e4fc236c-090a-4ee9-91c5-63553daddde9",
              "parentUUID": "02d5e74f-c42f-43f3-8b57-da832901e3ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24994f27-25c4-44be-9d94-63ffa7e50c29",
            "4d30f7b1-2912-4f17-90eb-5da6da098dd8",
            "e4fc236c-090a-4ee9-91c5-63553daddde9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 777,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "configFile": "report-config.json"
      },
      "version": "6.2.0"
    }
  }
}